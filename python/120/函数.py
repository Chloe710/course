# 计算机的函数，是一个固定的一个程序段，或称其为一个子程序，它在可以实现固定运算功能的同时，还带有一个入口和一个出口，
# 所谓的入口，就是函数所带的各个参数，我们可以通过这个入口，把函数的参数值代入子程序，供计算机处理；所谓出口，
# 就是指函数的函数值，在计算机求得之后，由此口带回给调用它的程序。
# 函数有入口: 函数的参数
# 函数有出口: 函数的返回值
# 函数实现: 固定运算的功能
# 我们之前写的代码还是从上到下一行一行执行
# 我们可以使用函数把程序模块化
# 函数的定义
# def 函数名(参数列表) -> 返回值:
#     pass 
# 函数的分类
# 1. 无参无返回值
# 2. 有参无返回值
# 3. 无参有返回值
# 4. 有参有返回值
# 我们设计函数的时候如何选择以上四种方式
# 如果有程序猿确定不了的内容我们就需要参数，如果计算的结果在其他地方还需要使用那么就需要返回值
# 1. 无参无返回值
def sum() -> None:
    result = 1 + 2
    print(result)

# 函数不调用不执行， 函数的调用必须在函数实现之后
# sum()

# 2. 有参无返回值
# 2.1. 参数类型
#       必须参数: 就是在调用函数的时候必须给的参数
def fun1(a, b) -> None:
    print(a + b)
    pass

# fun1(1, 2)
# 参数传递问题
#   形参: 函数定义当中参数列表的参数
#   实参: 调用函数的时候传入参数
#   可变类型在参数传递的过程中形参的改变会直接影响实际参数的值, 
#   不可变类型在参数传递的过程中形参的改变不会接影响实际参数的值
def fun2(a) -> None:
    a += 1
    print(f'形参改变后: {a}')
    pass

# a = 1
# print(f'调用函数前: {a}')
# fun2(a)
# print(f'调用函数后: {a}')

def fun3(a) -> None:
    a.append(1)
    print(f'形参改变后: {a}')
    pass

a = [1, 2, 3]
print(f'调用函数前: {a}')
fun3(a.copy())
print(f'调用函数后: {a}')



#       关键字参数
#       默认值参数
#       不定长参数